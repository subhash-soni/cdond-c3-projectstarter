version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      id : 
        type : string   
      cond :
        type : string 
    steps:
      - run:
          name: Destroy environments - Backend
          when: << parameters.cond >>
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
            exit 1
      - run:
          name: Destroy environments - Frontend 
          when: << parameters.cond >>
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
            exit 1      
          environment:
              

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            # exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test Frontend
          command: |
            cd frontend
            npm install
            npm run test
  
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Backend
          command: |
            cd backend
            npm install
            npm run test
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Analyze Frontend Vulnerabilities
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical          
  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Analyze Backend Vulnerabilities
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical          
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      - checkout
      # Checkout code from git
      - run: 
          name: Installing tar gzip
          command: |
             yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=Project3-udacity \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
          # exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=your-Project3-udacity-frontend \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
          # exit 1
      - run:
          name: Add back-end ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory
            cat inventory
          # exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
           id: ${CIRCLE_WORKFLOW_ID:0:7}
           cond: on_fail    
  
  configure-infrastructure: 
    docker:
      # Docker image here that supports Ansible - Should have Python for Woking as Control Node
      # https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#control-node-requirements
      - image: cimg/python:3.10.0
     
    steps:
      # Checkout code from git
      - checkout  
      - run: python --version
      
      # Add ssh keys with fingerprint  --> https://circleci.com/docs/2.0/add-ssh-key/#adding-ssh-keys-to-a-job
      - add_ssh_keys:
          fingerprints:
            - "13:1d:dd:c2:44:52:ea:22:c2:59:61:79:af:00:27:08"
    
      # attach workspace refer -> https://circleci.com/docs/2.0/configuration-reference/#attachworkspace
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          # Your code here
          command: |
            sudo add-apt-repository ppa:ansible/ansible
            sudo apt-get update
            sudo apt install ansible
            sudo ansible --version
          # exit 1
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          # Your code here
          command: |
            ansible-playbook -i inventory.txt configure-server.yaml
          # exit 1
          # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          cond: on_fail                   
  
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend : 
          requires: [build-frontend]
      - test-backend : 
          requires: [build-backend]
      - scan-frontend : 
          requires: [build-frontend]
      - scan-backend : 
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
                    