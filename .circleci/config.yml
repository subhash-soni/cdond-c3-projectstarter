version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      id : 
        type : string   
      cond :
        type : string 
    steps:
      - run:
          name: Destroy environments - Backend
          when: << parameters.cond >>
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
            exit 1
      - run:
          name: Destroy environments - Frontend 
          when: << parameters.cond >>
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
            exit 1      
          environment:
              

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            # exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test Frontend
          command: |
            cd frontend
            npm install
            npm run test
  
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Backend
          command: |
            cd backend
            npm install
            npm run test
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Analyze Frontend Vulnerabilities
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical          
  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Analyze Backend Vulnerabilities
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical          
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      - checkout
      # Checkout code from git
      - run: 
          name: Installing tar gzip
          command: |
             yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=Project3-udacity \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
          # exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=your-Project3-udacity-frontend \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
          # exit 1
      - run:
          name: Add back-end EC2 ip to ansible inventory
          # Refer to https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html 
          # check explanation for 'tag:<key>'
          command: |
            cd .circleci/ansible
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory.txt
            cat inventory.txt
          # exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
           id: ${CIRCLE_WORKFLOW_ID:0:7}
           cond: on_fail    
  
  configure-infrastructure: 
    docker:
      # Docker image here that supports Ansible - Should have Python for Woking as Control Node
      # refer https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#control-node-requirements
      - image: cimg/python:3.10.0
     
    steps:
      # Checkout code from git
      - checkout  
      - run: python --version
      
      # Add ssh keys with fingerprint  --> https://circleci.com/docs/2.0/add-ssh-key/#adding-ssh-keys-to-a-job
      - add_ssh_keys:
          fingerprints:
            - "13:1d:dd:c2:44:52:ea:22:c2:59:61:79:af:00:27:08"
    
      # attach workspace refer -> https://circleci.com/docs/2.0/configuration-reference/#attachworkspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          # Your code here
          command: |
            cd .circleci/ansible
            sudo add-apt-repository ppa:ansible/ansible
            sudo apt-get update
            sudo apt install ansible
            sudo ansible --version
          # exit 1
      - run:
          name: Configure server
          # Your code here
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
          # exit 1
          # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          cond: on_fail  
  
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here that supports NodeJS
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      # restore the backend cache    
      - restore_cache:
          keys: [backend-build]
      # - run: 
      #     name: Install python 3 as below AWS CLI version is failing with python 2.7    
      #     command: |
      #       sudo apt-get update
      #       sudo apt-get install python3.8 
            
      #       python --version
      - run: 
          name: Install awscli else destroy-environment job keep failing!
            # curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            # unzip awscli-bundle.zip
            # sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
            
            # Trying another approach now -> https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

      - run:
          name: Run migrations
          # Your code here
          # Run and save the migration output
          command: |
            cd backend
            npm run migrations > migrations_dump.txt
           
          # npm install
          # npm audit fix --audit-level=critical --force
          # npm audit fix --force
            
          # exit 1
      - run:
          name: Send migration results to memstash
          # Your code here
          command: |
            cd backend
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -H "Content-Type: text/plain" -H "token: f77a911e-0add-4ba5-ae19-b5c5ff2df0a8" \
              --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
              
          # exit 1       
      # Here's where you will add some code to rollback on failure   
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          cond: on_fail 

  deploy-frontend:
    # Docker image here that supports AWS CLI
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies - Python
          # your code here  -> Refer to https://docs.aws.amazon.com/cli/v1/userguide/install-linux.html
          command: |
            cd frontend
            sudo apt-get update
            sudo apt-get install python    
      - run: python --version
      - run:
          name: Install dependencies - AWSCLI
          # your code here  -> Refer to https://docs.aws.amazon.com/cli/v1/userguide/install-linux.html
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      
      - run:
          name: Install dependencies - NPM
          # your code here  -> https://docs.npmjs.com/cli/v6/commands/npm-install
          command: |
            cd frontend
            sudo npm install
      - run:
          name: Install dependencies - Nodejs
          # your code here  -> Refer to https://docs.aws.amazon.com/cli/v1/userguide/install-linux.html
          command: |
            cd frontend
            sudo apt install nodejs
      - run:
          name: Get backend url
          # your code here - Copied ec2 describe code from Deploy Infrastructure!
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
  
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          # your code here
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          cond: on_fail

  deploy-backend:
    docker:
      # Docker image here that supports Ansible 
      # It should have Python for Woking as Control Node. Refer https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#control-node-requirements
      - image: cimg/python:3.10.0
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint  --> https://circleci.com/docs/2.0/add-ssh-key/#adding-ssh-keys-to-a-job
      - add_ssh_keys:
          fingerprints:
            - "13:1d:dd:c2:44:52:ea:22:c2:59:61:79:af:00:27:08"
      # attach workspace so that you have access to the previously generated inventory.txt from the deploy-infrastructure job.
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies - Ansible
          command: |
            sudo add-apt-repository ppa:ansible/ansible
            sudo apt-get update
            sudo apt install ansible
            sudo ansible --version
      - run: 
          name: Installing tar gzip   # refer https://stackoverflow.com/questions/33423915/how-to-zip-a-file-in-ubuntu
          command: |
             sudo apt-get install zip gzip tar
                   
      - run:
          name: Install dependencies - NPM
          # your code here  -> https://docs.npmjs.com/cli/v6/commands/npm-install
          command: |
            cd frontend
            sudo npm install
      - run:
          name: Install dependencies - Nodejs
          # your code here  -> Refer to https://docs.aws.amazon.com/cli/v1/userguide/install-linux.html
          command: |
            cd frontend
            sudo apt install nodejs       
          # your code here
      - run:
          name: Deploy backend
          # your code here
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          cond: on_fail


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend : 
          requires: [build-frontend]
      - test-backend : 
          requires: [build-backend]
      - scan-frontend : 
          requires: [build-frontend]
      - scan-backend : 
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]   
      - deploy-backend:
          requires: [run-migrations]
      - deploy-frontend:
          requires: [run-migrations]    
                    